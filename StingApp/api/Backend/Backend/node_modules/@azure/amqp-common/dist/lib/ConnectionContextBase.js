"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const rhea_promise_1 = require("rhea-promise");
const cbs_1 = require("./cbs");
const dataTransformer_1 = require("./dataTransformer");
const connectionConfig_1 = require("./connectionConfig");
const sas_1 = require("./auth/sas");
const Constants = require("./util/constants");
const os = require("os");
var ConnectionContextBase;
(function (ConnectionContextBase) {
    /**
     * Creates the base connection context.
     * @param {CreateConnectionContextBaseParameters} parameters Parameters to be provided to create
     * the base connection context.
     */
    function create(parameters) {
        if (!parameters || typeof parameters !== "object") {
            throw new Error("'parameters' is a required parameter and must be of type 'object'.");
        }
        connectionConfig_1.ConnectionConfig.validate(parameters.config, { isEntityPathRequired: parameters.isEntityPathRequired || false });
        const userAgent = parameters.connectionProperties.userAgent;
        if (userAgent.length > Constants.maxUserAgentLength) {
            throw new Error(`The user-agent string cannot be more than 128 characters in length.` +
                `The given user-agent string is: ${userAgent} with length: ${userAgent.length}`);
        }
        const connectionOptions = {
            transport: Constants.TLS,
            host: parameters.config.host,
            hostname: parameters.config.host,
            username: parameters.config.sharedAccessKeyName,
            port: 5671,
            reconnect: false,
            properties: {
                product: parameters.connectionProperties.product,
                version: parameters.connectionProperties.version,
                "user-agent": userAgent,
                platform: `(${os.arch()}-${os.type()}-${os.release()})`,
                framework: `Node/${process.version}`
            }
        };
        const connection = new rhea_promise_1.Connection(connectionOptions);
        const connectionLock = `${Constants.establishConnection}-${rhea_promise_1.generate_uuid()}`;
        const connectionContextBase = {
            wasConnectionCloseCalled: false,
            connectionLock: connectionLock,
            negotiateClaimLock: `${Constants.negotiateClaim}-${rhea_promise_1.generate_uuid()}`,
            connection: connection,
            connectionId: connection.id,
            cbsSession: new cbs_1.CbsClient(connection, connectionLock),
            config: parameters.config,
            tokenProvider: parameters.tokenProvider ||
                new sas_1.SasTokenProvider(parameters.config.endpoint, parameters.config.sharedAccessKeyName, parameters.config.sharedAccessKey),
            dataTransformer: parameters.dataTransformer || new dataTransformer_1.DefaultDataTransformer()
        };
        return connectionContextBase;
    }
    ConnectionContextBase.create = create;
})(ConnectionContextBase = exports.ConnectionContextBase || (exports.ConnectionContextBase = {}));
//# sourceMappingURL=ConnectionContextBase.js.map