"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const connectionConfig_1 = require("./connectionConfig");
/**
 * Describes the connection config object that is created after parsing an EventHub connection
 * string. It also provides some convenience methods for getting the address and audience for
 * different entities.
 * @module EventHubConnectionConfig
 */
var EventHubConnectionConfig;
(function (EventHubConnectionConfig) {
    /**
     * Creates the connection config.
     * @param {string} connectionString - The connection string for a given service like
     * EventHub/ServiceBus.
     * @param {string} [path]           - The name/path of the entity (hub name) to which the
     * connection needs to happen. This will override the EntityPath in the connectionString
     * if present.
     * @returns {EventHubConnectionConfig} EventHubConnectionConfig
     */
    function create(connectionString, path) {
        const config = connectionConfig_1.ConnectionConfig.create(connectionString, path);
        if (!config.entityPath) {
            throw new Error(`Either provide "path" or the "connectionString": "${connectionString}", ` +
                `must contain EntityPath="<path-to-the-entity>".`);
        }
        return createFromConnectionConfig(config);
    }
    EventHubConnectionConfig.create = create;
    /**
     * Creates an EventHubConnectionConfig from the provided base ConnectionConfig.
     * @param config The base connection config from which the EventHubConnectionConfig needs to be
     * created.
     * @returns EventHubConnectionConfig
     */
    function createFromConnectionConfig(config) {
        connectionConfig_1.ConnectionConfig.validate(config, { isEntityPathRequired: true });
        config.getManagementAudience = () => {
            return `${config.endpoint}${config.entityPath}/$management`;
        };
        config.getManagementAddress = () => {
            return `${config.entityPath}/$management`;
        };
        config.getSenderAudience =
            (partitionId) => {
                if (partitionId != undefined) {
                    if (typeof partitionId !== "string" && typeof partitionId !== "number") {
                        throw new TypeError("'partitionId' must be of type 'string' or 'number'.");
                    }
                    return `${config.endpoint}${config.entityPath}/Partitions/${partitionId}`;
                }
                else {
                    return `${config.endpoint}${config.entityPath}`;
                }
            };
        config.getSenderAddress =
            (partitionId) => {
                if (partitionId != undefined) {
                    if (typeof partitionId !== "string" && typeof partitionId !== "number") {
                        throw new TypeError("'partitionId' must be of type 'string' or 'number'.");
                    }
                    return `${config.entityPath}/Partitions/${partitionId}`;
                }
                else {
                    return `${config.entityPath}`;
                }
            };
        config.getReceiverAudience =
            (partitionId, consumergroup) => {
                if (partitionId == undefined ||
                    (typeof partitionId !== "string" && typeof partitionId !== "number")) {
                    throw new TypeError(`'partitionId' is a required parameter and must be of ` +
                        `type 'string' or 'number'`);
                }
                if (!consumergroup)
                    consumergroup = "$default";
                return `${config.endpoint}${config.entityPath}/ConsumerGroups/${consumergroup}/` +
                    `Partitions/${partitionId}`;
            };
        config.getReceiverAddress =
            (partitionId, consumergroup) => {
                if (partitionId == undefined ||
                    (typeof partitionId !== "string" && typeof partitionId !== "number")) {
                    throw new TypeError(`'partitionId' is a required parameter and must be of ` +
                        `type 'string' or 'number'`);
                }
                if (!consumergroup)
                    consumergroup = "$default";
                return `${config.entityPath}/ConsumerGroups/${consumergroup}/Partitions/${partitionId}`;
            };
        return config;
    }
    EventHubConnectionConfig.createFromConnectionConfig = createFromConnectionConfig;
    /**
     * Validates the properties of connection config.
     * @param {ConnectionConfig} config The connection config to be validated.
     * @returns {void} void
     */
    function validate(config) {
        return connectionConfig_1.ConnectionConfig.validate(config, { isEntityPathRequired: true });
    }
    EventHubConnectionConfig.validate = validate;
})(EventHubConnectionConfig = exports.EventHubConnectionConfig || (exports.EventHubConnectionConfig = {}));
//# sourceMappingURL=eventhubConnectionConfig.js.map