import { Connection } from "rhea-promise";
import { CbsClient } from "./cbs";
import { DataTransformer } from "./dataTransformer";
import { TokenProvider } from "./auth/token";
import { ConnectionConfig } from "./connectionConfig";
/**
 * @interface ConnectionContextBase
 * Provides contextual information like the underlying amqp connection, cbs session, tokenProvider,
 * Connection config, data transformer, etc.
 */
export interface ConnectionContextBase {
    /**
     * @property {ConnectionConfig} config The EventHub connection config that is created after
     * parsing the connection string.
     */
    readonly config: ConnectionConfig;
    /**
     * @property {string} connectionLock The unqiue lock name per connection that is used to
     * acquire the lock for establishing an aqmp connection per client if one does not exist.
     */
    readonly connectionLock: string;
    /**
     * @property {string} negotiateClaimLock The unqiue lock name per connection that is used to
     * acquire the lock for negotiating cbs claim by an entity on that connection.
     */
    readonly negotiateClaimLock: string;
    /**
     * @property {TokenProvider} tokenProvider The TokenProvider to be used for getting tokens
     * for authentication for the EventHub client.
     */
    readonly tokenProvider: TokenProvider;
    /**
     * @property {Connection} connection The underlying AMQP connection.
     */
    connection: Connection;
    /**
     * @property {string} connectionId The amqp connection id that uniquely identifies the
     * connection within a process.
     */
    connectionId: string;
    /**
     * @property {boolean} wasConnectionCloseCalled Indicates whether the close() method was
     * called on the connection object.
     */
    wasConnectionCloseCalled: boolean;
    /**
     * @property {DataTransformer} dataTransformer A DataTransformer object that has methods named
     * - encode Responsible for encoding the AMQP message before sending it on the wire.
     * - decode Responsible for decoding the received AMQP message before passing it to the customer.
     */
    dataTransformer: DataTransformer;
    /**
     * @property {CbsClient} cbsSession A reference to the cbs session ($cbs endpoint) on the
     * underlying AMQP connection for the EventHub Client.
     */
    cbsSession: CbsClient;
}
/**
 * Defines the properties that need to be set while establishing the AMQP connection.
 * @interface ConnectionProperties
 */
export interface ConnectionProperties {
    /**
     * @property {string} product The name of the product that will be populated as the AMQP
     * connection property. Example: "MSJSClient".
     */
    product: string;
    /**
     * @property {string} version The version of the package/sdk that is making the AMQP connection.
     */
    version: string;
    /**
     * @property {string} userAgent The userAgent that needs to be set as the AMQP connection
     * property. Example: `"/js-service-bus"` or `"/js-event-hubs,/js-event-processor-host=1.0.0"`.
     */
    userAgent: string;
}
/**
 * Describes the parameters that can be provided to create the base connection context.
 * @interface CreateConnectionContextBaseParameters
 */
export interface CreateConnectionContextBaseParameters {
    /**
     * @property {ConnectionConfig} config The connection config that is created by parsing the
     * connection string.
     */
    config: ConnectionConfig;
    /**
     * @property {ConnectionProperties} connectionProperties Properties to be provided while creating
     * the AMQP connection.
     */
    connectionProperties: ConnectionProperties;
    /**
     * @property {TokenProvider} [tokenProvider] The token provider to be used for Authentication.
     * Default value: SasTokenProvider.
     */
    tokenProvider?: TokenProvider;
    /**
     * @property {DataTransformer} [dataTransformer] The datatransformer to be used for encoding and
     * decoding messages. Default value: DefaultDataTransformer
     */
    dataTransformer?: DataTransformer;
    /**
     * @property {boolean} [isEntityPathRequired] Determines whether entity path should be a part of
     * the connection config. If `true` it must be present, `false` otherwise. Default value false.
     */
    isEntityPathRequired?: boolean;
}
export declare module ConnectionContextBase {
    /**
     * Creates the base connection context.
     * @param {CreateConnectionContextBaseParameters} parameters Parameters to be provided to create
     * the base connection context.
     */
    function create(parameters: CreateConnectionContextBaseParameters): ConnectionContextBase;
}
//# sourceMappingURL=ConnectionContextBase.d.ts.map